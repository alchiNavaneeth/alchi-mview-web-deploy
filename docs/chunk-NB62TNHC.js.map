{
  "version": 3,
  "sources": ["src/app/api/api/base-api.service.ts", "src/app/api/api/audit-log-api.service.ts", "src/app/api/api/beeping-api.service.ts", "src/app/api/api/category-api.service.ts", "src/app/api/api/clipping-api.service.ts", "src/app/api/api/coc-log-api.service.ts", "src/app/api/api/event-code-api.service.ts", "src/app/api/api/organization-api.service.ts", "src/app/api/api/redact-api.service.ts", "src/app/api/api/session-api.service.ts", "src/app/api/api/tagged-session-api.service.ts", "src/app/api/api/user-api.service.ts", "src/app/core/auth/auth.service.ts", "src/app/api/api/token-api.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseApiService {\n  basePath: string;\n\n  constructor() {\n    this.basePath = (window as any)['ApiUrl'];\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { AuditLogModel } from '../model/models';\n\n@Injectable({ providedIn: 'root' })\nexport class AuditLogApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiAuditLogGetAuditLogByContextId(contextId: number): Observable<any> {\n    return this.http.get<AuditLogModel[]>(this.basePath + 'api/AuditLog/GetAuditLogByContextId', {\n      params: {\n        ContextId: contextId\n      }\n    });\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { BeepingRequestModel, BeepingResponseModel } from '../model/beeping.model';\n\n@Injectable({ providedIn: 'root' })\nexport class BeepingApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiBeepingCreateRecordingBeeping(params: BeepingRequestModel): Observable<any> {\n    return this.http.post<BeepingResponseModel>(\n      this.basePath + 'api/Beeping/CreateRecordingBeeping',\n      {},\n      {\n        params: {\n          RecId: params.RecID,\n          startDateTime: params.startDateTime,\n          endDateTime: params.endDateTime,\n          BeepingIntervals: params.BeepingIntervals as any\n        }\n      }\n    );\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { CategoriesModel } from '../model/category.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CategoryApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiCategoryGetCategories(): Observable<any> {\n    return this.http.get<CategoriesModel[]>(this.basePath + 'api/Category/GetCategories');\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { ClippingModel } from '../model/clipping.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ClippingApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiClippingCreateRecordingClipped(\n    recId: number,\n    start: string,\n    end: string,\n    mediaType: 'A' | 'V' | 'AV'\n  ): Observable<any> {\n    return this.http.post<ClippingModel>(\n      this.basePath + 'api/Clipping/CreateRecordingClipped',\n      {},\n      {\n        params: {\n          RecID: recId,\n          startDateTime: start,\n          endDateTime: end,\n          mediaType\n        }\n      }\n    );\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { COCLogModel } from '../model/coc-log.model';\n\n@Injectable({ providedIn: 'root' })\nexport class COCLogApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiCOCLogGetCOCLogByUniqueFileName(filename: string): Observable<any> {\n    return this.http.get<COCLogModel[]>(this.basePath + 'api/COCLog/GetCOCLogByUniqueFileName', {\n      params: {\n        UniqueFileName: filename\n      }\n    });\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { ICVEventsModel, BWVEventsModel, RedactListModel } from '../model/event-code.model';\n\n@Injectable({ providedIn: 'root' })\nexport class EventCodeApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiEventCodeGetSessionEventCodes(): Observable<any> {\n    return this.http.get<ICVEventsModel[]>(this.basePath + 'api/EventCode/GetSessionEventCodes');\n  }\n\n  public apiEventCodeGetEventCodes(): Observable<any> {\n    return this.http.get<BWVEventsModel[]>(this.basePath + 'api/EventCode/GetEventCodes');\n  }\n\n  public apiEnumGetPMStatusEnums(): Observable<any> {\n    return this.http.get<RedactListModel[]>(this.basePath + '/api/Enum/GetPMStatusEnums');\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { OrganizationModel } from '../model/organization.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OrganizationApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiOrganizationGetOrganization(): Observable<any> {\n    return this.http.get<OrganizationModel[]>(this.basePath + 'api/Organization/GetOrganization');\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { ProceedRedactResponse, ReviewRedactResponse } from '../model/redact.model';\n\n@Injectable({ providedIn: 'root' })\nexport class RedactApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiRedactProceedRecordingForRedact(video_id: number): Observable<any> {\n    return this.http.post<ProceedRedactResponse>(\n      this.basePath + 'api/Redact/ProceedRecordingForRedact',\n      {},\n      {\n        params: {\n          VideoId: video_id\n        }\n      }\n    );\n  }\n\n  public apiRedactReviewRedactRecording(video_id: number, filename: string): Observable<any> {\n    return this.http.post<ReviewRedactResponse>(\n      this.basePath + 'api/Redact/ReviewRedactRecording',\n      {},\n      {\n        params: {\n          VideoId: video_id,\n          UniqueFileName: filename\n        }\n      }\n    );\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { SessionSearchParamsModel, SessionSearchResponseModel } from '../model/session.model';\n\n@Injectable({ providedIn: 'root' })\nexport class SessionApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiMediaSearchGetFilterMediaSearch({\n    currentPageNo = 1,\n    itemsPerPage = 20,\n    ...params\n  }: SessionSearchParamsModel): Observable<any> {\n    return this.http.post<SessionSearchResponseModel>(this.basePath + 'api/MediaSearch/GetFilterMediaSearch', {\n      CurrentPageNo: currentPageNo,\n      ItemsPerPage: itemsPerPage,\n      SearchMode: params.searchMode,\n      UserID: params.userID, // User ID is the Account\n      LoggedInUserID: params.loggedInUserID,\n      CombinedSearch: params.combinedSearch,\n      From: params.from,\n      To: params.to,\n      IncludeExpired: params.includeExpired,\n      IncludeLiveSessions: params.includeLiveSessions,\n      CompanyID: params.companyID,\n      CategoryID: params.categoryID,\n      PMStatusId: params.pmStatusId,\n      AssetTag: params.assetTag,\n      tags: params.tags,\n      MeshEventId: params.meshEventId,\n      EventCodeId: params.eventCodeId,\n      StealthSessionOnly: params.stealthSessionOnly,\n      IncludeClassified: params.includeClassified,\n      Name: params.name,\n      Description: params.description,\n      CaseNumber: params.caseNumber,\n      EBNumber: params.ebNumber,\n      MetaData: params.metaData\n    });\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { TagSessionRequest, TagSessionResponse } from '../model/tagged-session.model';\n\n@Injectable({ providedIn: 'root' })\nexport class TaggedSessionApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiTaggedSessionCheckIfSessionTagged(_vod_id: number): Observable<any> {\n    return this.http.post<boolean>(\n      this.basePath + 'api/TaggedSession/CheckIfSessionTagged',\n      {},\n      {\n        params: {\n          VodID: _vod_id\n        }\n      }\n    );\n  }\n\n  public apiTaggedSessionSaveTaggedSession(params: TagSessionRequest): Observable<any> {\n    return this.http.post<TagSessionResponse>(this.basePath + 'api/TaggedSession/SaveTaggedSession', {\n      ...params\n    });\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BaseApiService } from './base-api.service';\nimport { UserModel } from '../model/user.model';\n\n@Injectable({ providedIn: 'root' })\nexport class UserApiService extends BaseApiService {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  public apiUserGetUsersByCompanyId(companyId: number): Observable<any> {\n    return this.http.get<UserModel[]>(this.basePath + 'api/User/GetUsersByCompanyId', {\n      params: {\n        companyId: companyId\n      }\n    });\n  }\n}\n", "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor() {}\n\n  set token(token: string) {\n    localStorage.setItem('mview_token', token);\n    // localStorage.setItem('issued_time', new Date().toString());\n  }\n\n  set issuedTime(time: string) {\n    localStorage.setItem('issued_time', time);\n  }\n\n  set expiration(time: number) {\n    localStorage.setItem('expiration', time.toString());\n  }\n\n  get token(): any {\n    return localStorage.getItem('mview_token');\n  }\n\n  removeToken() {\n    localStorage.removeItem('mview_token');\n    localStorage.removeItem('issued_time');\n    localStorage.removeItem('expiration');\n    return true;\n  }\n\n  checkTokenExpiration(): boolean {\n    const token = localStorage.getItem('mview_token');\n    const issued_time = new Date(localStorage.getItem('issued_time')!);\n    const expiration = parseInt(localStorage.getItem('expiration')!);\n\n    if (!token || token === 'null') {\n      return false;\n    } else {\n      const now = new Date();\n      const diff = (now.getTime() - issued_time.getTime()) / 1000;\n\n      if (diff > expiration) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n}\n", "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { TokenModel } from '../model/token.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenApiService {\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  async fetchToken() {\n    this.http\n      .get<TokenModel>('https://dev-api.mview.com.au/api/Kiosk/GetTokenByUsername', {\n        params: {\n          username: 'thariq@alchidesignstudio.com'\n        }\n      })\n      .subscribe((res) => {\n        this.authService.token = res.access_token;\n        this.authService.issuedTime = new Date().toString();\n        this.authService.expiration = res.expires_in;\n      });\n  }\n}\n"],
  "mappings": "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",
  "names": ["BaseApiService", "basePath", "constructor", "window", "factory", "\u0275fac", "providedIn", "AuditLogApiService", "BaseApiService", "http", "constructor", "apiAuditLogGetAuditLogByContextId", "contextId", "get", "basePath", "params", "ContextId", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "BeepingApiService", "BaseApiService", "http", "constructor", "apiBeepingCreateRecordingBeeping", "params", "post", "basePath", "RecId", "RecID", "startDateTime", "endDateTime", "BeepingIntervals", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "CategoryApiService", "BaseApiService", "http", "constructor", "apiCategoryGetCategories", "get", "basePath", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "ClippingApiService", "BaseApiService", "http", "constructor", "apiClippingCreateRecordingClipped", "recId", "start", "end", "mediaType", "post", "basePath", "params", "RecID", "startDateTime", "endDateTime", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "COCLogApiService", "BaseApiService", "http", "constructor", "apiCOCLogGetCOCLogByUniqueFileName", "filename", "get", "basePath", "params", "UniqueFileName", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "EventCodeApiService", "BaseApiService", "http", "constructor", "apiEventCodeGetSessionEventCodes", "get", "basePath", "apiEventCodeGetEventCodes", "apiEnumGetPMStatusEnums", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "OrganizationApiService", "BaseApiService", "http", "constructor", "apiOrganizationGetOrganization", "get", "basePath", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "RedactApiService", "BaseApiService", "http", "constructor", "apiRedactProceedRecordingForRedact", "video_id", "post", "basePath", "params", "VideoId", "apiRedactReviewRedactRecording", "filename", "UniqueFileName", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "SessionApiService", "BaseApiService", "http", "constructor", "apiMediaSearchGetFilterMediaSearch", "_a", "_b", "currentPageNo", "itemsPerPage", "params", "post", "basePath", "CurrentPageNo", "ItemsPerPage", "SearchMode", "searchMode", "UserID", "userID", "LoggedInUserID", "loggedInUserID", "CombinedSearch", "combinedSearch", "From", "from", "To", "to", "IncludeExpired", "includeExpired", "IncludeLiveSessions", "includeLiveSessions", "CompanyID", "companyID", "CategoryID", "categoryID", "PMStatusId", "pmStatusId", "AssetTag", "assetTag", "tags", "MeshEventId", "meshEventId", "EventCodeId", "eventCodeId", "StealthSessionOnly", "stealthSessionOnly", "IncludeClassified", "includeClassified", "Name", "name", "Description", "description", "CaseNumber", "caseNumber", "EBNumber", "ebNumber", "MetaData", "metaData", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "TaggedSessionApiService", "BaseApiService", "http", "constructor", "apiTaggedSessionCheckIfSessionTagged", "_vod_id", "post", "basePath", "params", "VodID", "apiTaggedSessionSaveTaggedSession", "__spreadValues", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "UserApiService", "BaseApiService", "http", "constructor", "apiUserGetUsersByCompanyId", "companyId", "get", "basePath", "params", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "AuthService", "constructor", "token", "localStorage", "setItem", "issuedTime", "time", "expiration", "toString", "getItem", "removeToken", "removeItem", "checkTokenExpiration", "issued_time", "Date", "parseInt", "diff", "getTime", "factory", "\u0275fac", "providedIn", "TokenApiService", "http", "authService", "constructor", "fetchToken", "__async", "get", "params", "username", "subscribe", "res", "token", "access_token", "issuedTime", "Date", "toString", "expiration", "expires_in", "\u0275\u0275inject", "HttpClient", "AuthService", "factory", "\u0275fac", "providedIn"]
}
