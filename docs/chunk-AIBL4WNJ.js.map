{
  "version": 3,
  "sources": ["src/app/app.component.ts", "src/app/app.component.html"],
  "sourcesContent": ["import { Component, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\n// import { environment } from 'src/environments/environment';\nimport { TokenApiService } from './api';\n\nimport { AuthService } from './core/auth/auth.service';\nimport { UserSessionService } from './core/session/user-session.service';\nimport { SharedService } from './modules/shared/services/shared.service';\n\n@Component({\n  standalone: false,\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  // isProduction: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private router: Router,\n    private sharedService: SharedService,\n    private tokenApiService: TokenApiService,\n    private authService: AuthService,\n    private userSessionService: UserSessionService\n  ) {\n    // this.isProduction = environment.production;\n    this.initializeRouting();\n  }\n\n  private navigateToRoute(route: string, queryParams: any) {\n    if (Object.keys(queryParams).length > 0) {\n      this.router.navigate([route], {\n        queryParams,\n        queryParamsHandling: 'merge'\n      });\n    } else {\n      this.router.navigate([route]);\n    }\n  }\n\n  private async initializeRouting() {\n    // const route = this.getAttribute('route');\n    // const queryParamsJson = this.getAttribute('queryParams');\n\n    // let token = this.getAttribute('token');\n    // let loggedInUser = this.getAttribute('loggedInUser');\n    // this.authService.removeToken();\n\n    // Adding token from dev-api for dev\n    // if (!token) {\n    //   const access_token = this.authService.token;\n\n    //   if (access_token && access_token !== 'null') {\n    //     const isValid = this.authService.checkTokenExpiration();\n\n    //     if (!isValid) await this.tokenApiService.fetchToken();\n    //     token = access_token;\n    //   } else {\n    //     await this.tokenApiService.fetchToken();\n    //     token = access_token;\n    //   }\n    // }\n\n    // Adding logged-in user id\n    // let loggedInUserId: number = loggedInUser ?? 0;\n\n    // this.userSessionService.userId = loggedInUserId;\n    // this.authService.token = token;\n\n    // if (route) {\n    // const queryParams = queryParamsJson ? JSON.parse(queryParamsJson) : {};\n    // this.navigateToRoute(route, queryParams);\n    // }\n\n    this.userSessionService.userId = 0;\n  }\n\n  getAttribute(attrName: string) {\n    return this.elementRef.nativeElement.getAttribute(attrName);\n  }\n\n  ngOnInit() {\n    const screen = this.getAttribute('Screen');\n    this.sharedService.changeScreen(screen);\n  }\n}\n", "<topbar-old />\n<router-outlet />\n"],
  "mappings": "+RAgBA,IAAaA,GAAY,IAAA,CAAnB,MAAOA,CAAY,CAIbC,WACAC,OACAC,cACAC,gBACAC,YACAC,mBANVC,YACUN,EACAC,EACAC,EACAC,EACAC,EACAC,EAAsC,CALtC,KAAAL,WAAAA,EACA,KAAAC,OAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,mBAAAA,EAGR,KAAKE,kBAAiB,CACxB,CAEQC,gBAAgBC,EAAeC,EAAgB,CACjDC,OAAOC,KAAKF,CAAW,EAAEG,OAAS,EACpC,KAAKZ,OAAOa,SAAS,CAACL,CAAK,EAAG,CAC5BC,YAAAA,EACAK,oBAAqB,QACtB,EAED,KAAKd,OAAOa,SAAS,CAACL,CAAK,CAAC,CAEhC,CAEcF,mBAAiB,QAAAS,EAAA,sBAkC7B,KAAKX,mBAAmBY,OAAS,CACnC,GAEAC,aAAaC,EAAgB,CAC3B,OAAO,KAAKnB,WAAWoB,cAAcF,aAAaC,CAAQ,CAC5D,CAEAE,UAAQ,CACN,IAAMC,EAAS,KAAKJ,aAAa,QAAQ,EACzC,KAAKhB,cAAcqB,aAAaD,CAAM,CACxC,4CAtEWvB,GAAYyB,EAAAC,CAAA,EAAAD,EAAAE,CAAA,EAAAF,EAAAG,CAAA,EAAAH,EAAAI,CAAA,EAAAJ,EAAAK,CAAA,EAAAL,EAAAM,CAAA,CAAA,CAAA,2BAAZ/B,EAAYgC,UAAA,CAAA,CAAA,UAAA,CAAA,EAAAC,WAAA,GAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GChBzBE,EAAA,EAAA,YAAA,EAAc,EAAA,eAAA,+CDgBDvC,CAAY,GAAA",
  "names": ["AppComponent", "elementRef", "router", "sharedService", "tokenApiService", "authService", "userSessionService", "constructor", "initializeRouting", "navigateToRoute", "route", "queryParams", "Object", "keys", "length", "navigate", "queryParamsHandling", "__async", "userId", "getAttribute", "attrName", "nativeElement", "ngOnInit", "screen", "changeScreen", "\u0275\u0275directiveInject", "ElementRef", "Router", "SharedService", "TokenApiService", "AuthService", "UserSessionService", "selectors", "standalone", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element"]
}
