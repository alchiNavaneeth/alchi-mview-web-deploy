{
  "version": 3,
  "sources": ["src/app/modules/auth/login/login.component.ts", "src/app/modules/auth/login/login.component.html", "src/app/modules/auth/login/login-routing.module.ts", "src/app/modules/auth/login/login.module.ts"],
  "sourcesContent": ["import { Component, HostBinding, OnInit, Renderer2 } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, FormGroup, FormBuilder } from '@angular/forms';\n\nimport { ILoginScreen } from '../../shared/models/login.model';\nimport { SharedService } from '../../shared/services/shared.service';\nimport { ToastrService } from 'ngx-toastr';\n\ndeclare var QRCode: any;\ndeclare var QRCodeKey: any;\n\nconst phoneEmailRegex = /^(\\d{10}|\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3}))$/;\n\n@Component({\n  standalone: false,\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n})\nexport class LoginComponent implements OnInit {\n  @HostBinding('class') class = 'login-box';\n  public loginForm!: UntypedFormGroup;\n  public MFAForm: UntypedFormGroup;\n\n  public isAuthLoading = false;\n  public QRCode = '';\n  public QRCodeKey: '';\n  public showPassword: boolean = false;\n  public currentScreen!: ILoginScreen;\n  public version: string = '';\n  public login_form: FormGroup;\n\n  message: any;\n  rememberMeDays: number = 0;\n  year: number;\n\n  constructor(\n    private renderer: Renderer2,\n    private toastr: ToastrService,\n    private sharedService: SharedService,\n    fb: FormBuilder\n  ) {\n    this.QRCode = QRCode;\n    this.QRCodeKey = QRCodeKey;\n    this.message = (window as any)['message'];\n    this.rememberMeDays = (window as any)['rememberMeDays'];\n    this.version = (window as any)['version'];\n    this.year = new Date().getFullYear();\n    this.login_form = fb.group({\n      Username: [null, Validators.required],\n      Password: [null, Validators.required]\n    });\n\n    this.MFAForm = fb.group({\n      MFACode: [null, [Validators.required, Validators.pattern(/^[0-9]+$/)]]\n    });\n  }\n\n  ngOnInit() {\n    this.renderer.addClass(document.querySelector('app-root'), 'login-page');\n    this.loginForm = new UntypedFormGroup({\n      email: new UntypedFormControl(null, Validators.required),\n      password: new UntypedFormControl(null, Validators.required)\n    });\n    this.sharedService.currentScreen.subscribe((screen) => {\n      this.currentScreen = screen;\n    });\n  }\n\n  public togglePasswordVisibility(): void {\n    this.showPassword = !this.showPassword;\n  }\n\n  async loginByAuth() {\n    if (this.loginForm.valid) {\n      this.isAuthLoading = true;\n      this.isAuthLoading = false;\n    } else {\n      this.toastr.error('Form is not valid!');\n    }\n  }\n\n  ngOnDestroy() {\n    this.renderer.removeClass(document.querySelector('app-root'), 'login-page');\n  }\n}\n", "<div *ngIf=\"currentScreen === 'Login'\" id=\"login-component\" class=\"p-0 container-fluid h-100 bg-image\">\n  <div class=\"row h-100 g-0\" [formGroup]=\"login_form\">\n    <!-- Login Form Column -->\n    <div class=\"p-0 col-md-4 d-flex justify-content-center align-items-center\">\n      <div class=\"mb-0 card\">\n        <div class=\"screen-card\">\n          <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" style=\"width: 176px; margin-bottom: 20%\" />\n\n          <div class=\"text-left card-title\">Welcome</div>\n\n          <input type=\"text\" style=\"display: none\" name=\"Mode\" value=\"Login\" />\n\n          <div class=\"form-group\" style=\"width: 100%\">\n            <mat-form-field appearance=\"outline\" class=\"example-full-width mask\" style=\"width: 100%\">\n              <mat-label>Username</mat-label>\n              <input\n                name=\"Username\"\n                formControlName=\"Username\"\n                autocomplete=\"off\"\n                type=\"text\"\n                matInput\n                placeholder=\"Username\"\n              />\n              <span\n                class=\"text-danger\"\n                *ngIf=\"\n                  login_form.controls['Username'].hasError('required') &&\n                  (login_form.controls['Username'].dirty || login_form.controls['Username'].touched)\n                \"\n              >\n                This field is required\n              </span>\n            </mat-form-field>\n          </div>\n\n          <div class=\"form-group\" style=\"width: 100%\">\n            <mat-form-field appearance=\"outline\" class=\"example-full-width mask\" style=\"width: 100%\">\n              <mat-label>Password</mat-label>\n              <input\n                name=\"Password\"\n                formControlName=\"Password\"\n                autocomplete=\"off\"\n                [type]=\"showPassword ? 'text' : 'password'\"\n                matInput\n                placeholder=\"Password\"\n              />\n              <mat-icon matSuffix (click)=\"togglePasswordVisibility()\">\n                {{ showPassword ? 'visibility_off' : 'visibility' }}\n              </mat-icon>\n              <span\n                class=\"text-danger\"\n                *ngIf=\"\n                  login_form.controls['Password'].hasError('required') &&\n                  (login_form.controls['Password'].dirty || login_form.controls['Password'].touched)\n                \"\n              >\n                Password is required\n              </span>\n            </mat-form-field>\n          </div>\n\n          <div class=\"input-bottom-section\">\n            <div class=\"checkbox-div\">\n              <input type=\"checkbox\" name=\"RememberMe\" />\n              <div class=\"checkbox-text\">Remember me</div>\n            </div>\n\n            <div class=\"forgot-password-text\">\n              <a href=\"/ForgotPassword.aspx\">Forgot Password?</a>\n            </div>\n          </div>\n\n          <div class=\"login-div\">\n            <button class=\"btn default-success rounded-pill\" type=\"submit\">Login</button>\n          </div>\n\n          <div *ngIf=\"message\" class=\"alert alert-danger\" role=\"alert\" style=\"margin-top: 50px\">\n            {{ message.text }}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"term-of-services\">\n        <div class=\"policy-text\">\n          By clicking on “Login”, you are agreeing to our\n          <a href=\"/Terms.aspx\">Terms of service</a>\n          and\n          <br />\n          acknowledge that our Privacy policy applies to you\n        </div>\n        <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd | Altitude version: {{ version }}</div>\n      </div>\n    </div>\n    <!-- Background Image Column -->\n    <div class=\"col-md-8 position-relative\">\n      <p class=\"vision-text position-absolute\">\n        Get\n        <span>vision</span>\n        <br />\n        where it matters\n      </p>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"currentScreen === 'MFACodeScreen'\" id=\"mfa-qr-code-component\" class=\"h-100 bg-image\">\n  <div class=\"g-0 overlay\" [formGroup]=\"MFAForm\">\n    <div class=\"mfr-code-card\">\n      <div class=\"logo\">\n        <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" />\n      </div>\n\n      <div class=\"mfr-title\">Multi-factor authentication</div>\n\n      <div class=\"qrcode-row\">\n        <div class=\"qr-div\"><img [src]=\"QRCode\" /></div>\n        <div class=\"qr-description\">\n          <div class=\"description\">\n            Scan the QR code using your third-party authentication app or enter the key manually:\n          </div>\n        </div>\n      </div>\n\n      <div style=\"font-weight: bold; word-wrap: break-word\">{{ QRCodeKey }}</div>\n\n      <div class=\"input-heading\">\n        Please enter the code generated by your authentication app to verify your identity.\n      </div>\n\n      <div class=\"form-group\">\n        <input type=\"text\" style=\"display: none\" name=\"Mode\" value=\"MFACodeScreen\" />\n\n        <mat-form-field name=\"MFACode\" appearance=\"outline\" class=\"mb-2 example-full-width mask\">\n          <mat-label>Authentication code</mat-label>\n\n          <input name=\"MFACode\" formControlName=\"MFACode\" autocomplete=\"off\" type=\"text\" matInput />\n\n          <span\n            class=\"text-danger\"\n            *ngIf=\"\n              MFAForm.controls['MFACode'].hasError('required') &&\n              (MFAForm.controls['MFACode'].dirty || MFAForm.controls['MFACode'].touched)\n            \"\n          >\n            MFA Code is required\n          </span>\n\n          <span\n            class=\"text-danger\"\n            *ngIf=\"\n              MFAForm.controls['MFACode'].hasError('pattern') &&\n              (MFAForm.controls['MFACode'].dirty || MFAForm.controls['MFACode'].touched)\n            \"\n          >\n            MFA Code must be a number\n          </span>\n        </mat-form-field>\n\n        <div *ngIf=\"message\" [class]=\"'text text-' + message.type\" role=\"alert\" style=\"margin-top: -20px\">\n          {{ message.text }}\n        </div>\n      </div>\n\n      <div class=\"checkbox-div\">\n        <input name=\"RememberMe30Days\" type=\"checkbox\" />\n        <div class=\"checkbox-text\">Remember me for {{ rememberMeDays }} days</div>\n      </div>\n\n      <div class=\"login-btn\">\n        <button class=\"btn btn-primary\">Login</button>\n      </div>\n\n      <div class=\"anchor-link\">\n        <a href=\"/LoginAngular.aspx?reset\">Sign in with a different account</a>\n      </div>\n    </div>\n\n    <div class=\"term-of-services\">\n      <div class=\"policy-text\">\n        By clicking on “Login”, you are agreeing to our\n        <a href=\"/Terms.aspx\">Terms of service</a>\n        and\n        <br />\n        acknowledge that our Privacy policy applies to you\n      </div>\n      <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd | Altitude version: {{ version }}</div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"currentScreen === 'MFAScreen'\" id=\"mfa-component\" class=\"h-100 bg-image\">\n  <div class=\"g-0 overlay\" [formGroup]=\"MFAForm\">\n    <div class=\"screen-card\">\n      <div class=\"logo\">\n        <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" />\n      </div>\n\n      <div class=\"mfr-title\">Multi-factor authentication</div>\n\n      <div class=\"input-heading\">\n        Please enter the code generated by your authentication app to verify your identity.\n      </div>\n\n      <div class=\"form-group\">\n        <input type=\"text\" style=\"display: none\" name=\"Mode\" value=\"MFAScreen\" />\n\n        <mat-form-field name=\"MFACode\" appearance=\"outline\" class=\"mb-2 example-full-width mask\">\n          <mat-label>Authentication code</mat-label>\n\n          <input name=\"MFACode\" formControlName=\"MFACode\" autocomplete=\"off\" type=\"text\" matInput />\n\n          <span\n            class=\"text-danger\"\n            *ngIf=\"\n              MFAForm.controls['MFACode'].hasError('required') &&\n              (MFAForm.controls['MFACode'].dirty || MFAForm.controls['MFACode'].touched)\n            \"\n          >\n            MFA Code is required\n          </span>\n          <span\n            class=\"text-danger\"\n            *ngIf=\"\n              MFAForm.controls['MFACode'].hasError('pattern') &&\n              (MFAForm.controls['MFACode'].dirty || MFAForm.controls['MFACode'].touched)\n            \"\n          >\n            MFA Code must be a number\n          </span>\n        </mat-form-field>\n        <div *ngIf=\"message\" [class]=\"'text text-' + message.type\" role=\"alert\" style=\"margin-top: -20px\">\n          {{ message.text }}\n        </div>\n      </div>\n\n      <div class=\"checkbox-div\">\n        <input name=\"RememberMe30Days\" type=\"checkbox\" />\n        <div class=\"checkbox-text\">Remember me for {{ rememberMeDays }} days</div>\n      </div>\n\n      <div class=\"login-btn\">\n        <button class=\"btn btn-primary\">Login</button>\n      </div>\n\n      <div class=\"anchor-link\">\n        <a href=\"/LoginAngular.aspx?reset\">Sign in with a different account</a>\n      </div>\n    </div>\n\n    <div class=\"term-of-services\">\n      <div class=\"policy-text\">\n        By clicking on “Login”, you are agreeing to our\n        <a href=\"/Terms.aspx\">Terms of service</a>\n        and\n        <br />\n        acknowledge that our Privacy policy applies to you\n      </div>\n      <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd | Altitude version: {{ version }}</div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"currentScreen === 'AccessDeniedScreen'\" id=\"accessdenied-component\" class=\"h-100 bg-image\">\n  <div class=\"g-0 overlay\">\n    <div class=\"screen-card\">\n      <div class=\"logo\">\n        <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" />\n      </div>\n\n      <div class=\"mfr-title\">Access Denied</div>\n\n      <div class=\"input-heading\">\n        Your account does not appear to be linked to access Portal.\n        <br />\n        Please contact your Administrator for further assistance.\n      </div>\n\n      <div class=\"anchor-link\">\n        <a href=\"/LoginAngular.aspx?reset\">Sign in with a different account</a>\n      </div>\n    </div>\n\n    <div class=\"term-of-services\">\n      <div class=\"policy-text\">\n        By clicking on “Login”, you are agreeing to our\n        <a href=\"/Terms.aspx\">Terms of service</a>\n        and\n        <br />\n        acknowledge that our Privacy policy applies to you\n      </div>\n\n      <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd | Altitude version: {{ version }}</div>\n    </div>\n  </div>\n</div>\n", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{ path: '', component: LoginComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule {}\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [CommonModule, LoginRoutingModule, SharedModule.forRoot()]\n})\nexport class LoginModule {}\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r1", "message", "text", "\u0275\u0275element", "\u0275\u0275template", "LoginComponent_div_0_span_14_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "togglePasswordVisibility", "LoginComponent_div_0_span_22_Template", "LoginComponent_div_0_div_34_Template", "\u0275\u0275property", "login_form", "controls", "hasError", "dirty", "touched", "showPassword", "\u0275\u0275textInterpolate2", "year", "version", "\u0275\u0275classMap", "type", "LoginComponent_div_1_span_23_Template", "LoginComponent_div_1_span_24_Template", "LoginComponent_div_1_div_25_Template", "MFAForm", "QRCode", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate", "QRCodeKey", "rememberMeDays", "LoginComponent_div_2_span_15_Template", "LoginComponent_div_2_span_16_Template", "LoginComponent_div_2_div_17_Template", "LoginComponent", "renderer", "toastr", "sharedService", "class", "loginForm", "MFAForm", "isAuthLoading", "QRCode", "QRCodeKey", "showPassword", "currentScreen", "version", "login_form", "message", "rememberMeDays", "year", "constructor", "fb", "window", "Date", "getFullYear", "group", "Username", "Validators", "required", "Password", "MFACode", "pattern", "ngOnInit", "addClass", "document", "querySelector", "UntypedFormGroup", "email", "UntypedFormControl", "password", "subscribe", "screen", "togglePasswordVisibility", "loginByAuth", "__async", "valid", "error", "ngOnDestroy", "removeClass", "\u0275\u0275directiveInject", "Renderer2", "ToastrService", "SharedService", "FormBuilder", "selectors", "hostVars", "hostBindings", "rf", "ctx", "\u0275\u0275classMap", "\u0275\u0275template", "LoginComponent_div_0_Template", "LoginComponent_div_1_Template", "LoginComponent_div_2_Template", "LoginComponent_div_3_Template", "\u0275\u0275property", "\u0275\u0275advance", "routes", "path", "component", "LoginComponent", "LoginRoutingModule", "RouterModule", "forChild", "LoginModule", "CommonModule", "LoginRoutingModule", "SharedModule", "forRoot"]
}
