{"version":3,"sources":["node_modules/@angular/platform-browser/fesm2022/animations.mjs","node_modules/@angular/platform-browser/fesm2022/animations/async.mjs","node_modules/@sweetalert2/ngx-sweetalert2/fesm2022/sweetalert2-ngx-sweetalert2.mjs","src/app/app-routing.module.ts","src/app/modules/shared/interceptors/http-interceptor.ts","src/app/app.module.ts","src/main.ts"],"sourcesContent":["/**\n * @license Angular v19.0.5\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, RendererFactory2, NgZone, ANIMATION_MODULE_TYPE, NgModule, ɵperformanceMarkFeature } from '@angular/core';\nexport { ANIMATION_MODULE_TYPE } from '@angular/core';\nimport { ɵDomRendererFactory2, BrowserModule } from '@angular/platform-browser';\nimport * as i1 from '@angular/animations/browser';\nimport { ɵAnimationEngine, ɵWebAnimationsStyleNormalizer, ɵAnimationRendererFactory, ɵAnimationStyleNormalizer, AnimationDriver, ɵWebAnimationsDriver, NoopAnimationDriver } from '@angular/animations/browser';\nimport { DOCUMENT } from '@angular/common';\nlet InjectableAnimationEngine = /*#__PURE__*/(() => {\n  class InjectableAnimationEngine extends ɵAnimationEngine {\n    // The `ApplicationRef` is injected here explicitly to force the dependency ordering.\n    // Since the `ApplicationRef` should be created earlier before the `AnimationEngine`, they\n    // both have `ngOnDestroy` hooks and `flush()` must be called after all views are destroyed.\n    constructor(doc, driver, normalizer) {\n      super(doc, driver, normalizer);\n    }\n    ngOnDestroy() {\n      this.flush();\n    }\n    static ɵfac = function InjectableAnimationEngine_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InjectableAnimationEngine)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.AnimationDriver), i0.ɵɵinject(i1.ɵAnimationStyleNormalizer));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: InjectableAnimationEngine,\n      factory: InjectableAnimationEngine.ɵfac\n    });\n  }\n  return InjectableAnimationEngine;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction instantiateDefaultStyleNormalizer() {\n  return new ɵWebAnimationsStyleNormalizer();\n}\nfunction instantiateRendererFactory(renderer, engine, zone) {\n  return new ɵAnimationRendererFactory(renderer, engine, zone);\n}\nconst SHARED_ANIMATION_PROVIDERS = [{\n  provide: ɵAnimationStyleNormalizer,\n  useFactory: instantiateDefaultStyleNormalizer\n}, {\n  provide: ɵAnimationEngine,\n  useClass: InjectableAnimationEngine\n}, {\n  provide: RendererFactory2,\n  useFactory: instantiateRendererFactory,\n  deps: [ɵDomRendererFactory2, ɵAnimationEngine, NgZone]\n}];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nconst BROWSER_ANIMATIONS_PROVIDERS = [{\n  provide: AnimationDriver,\n  useFactory: () => new ɵWebAnimationsDriver()\n}, {\n  provide: ANIMATION_MODULE_TYPE,\n  useValue: 'BrowserAnimations'\n}, ...SHARED_ANIMATION_PROVIDERS];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nconst BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{\n  provide: AnimationDriver,\n  useClass: NoopAnimationDriver\n}, {\n  provide: ANIMATION_MODULE_TYPE,\n  useValue: 'NoopAnimations'\n}, ...SHARED_ANIMATION_PROVIDERS];\n\n/**\n * Exports `BrowserModule` with additional dependency-injection providers\n * for use with animations. See [Animations](guide/animations).\n * @publicApi\n */\nlet BrowserAnimationsModule = /*#__PURE__*/(() => {\n  class BrowserAnimationsModule {\n    /**\n     * Configures the module based on the specified object.\n     *\n     * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.\n     * @see {@link BrowserAnimationsModuleConfig}\n     *\n     * @usageNotes\n     * When registering the `BrowserAnimationsModule`, you can use the `withConfig`\n     * function as follows:\n     * ```\n     * @NgModule({\n     *   imports: [BrowserAnimationsModule.withConfig(config)]\n     * })\n     * class MyNgModule {}\n     * ```\n     */\n    static withConfig(config) {\n      return {\n        ngModule: BrowserAnimationsModule,\n        providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS\n      };\n    }\n    static ɵfac = function BrowserAnimationsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BrowserAnimationsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: BrowserAnimationsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: BROWSER_ANIMATIONS_PROVIDERS,\n      imports: [BrowserModule]\n    });\n  }\n  return BrowserAnimationsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the set of dependency-injection providers\n * to enable animations in an application. See [animations guide](guide/animations)\n * to learn more about animations in Angular.\n *\n * @usageNotes\n *\n * The function is useful when you want to enable animations in an application\n * bootstrapped using the `bootstrapApplication` function. In this scenario there\n * is no need to import the `BrowserAnimationsModule` NgModule at all, just add\n * providers returned by this function to the `providers` list as show below.\n *\n * ```ts\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideAnimations()\n *   ]\n * });\n * ```\n *\n * @publicApi\n */\nfunction provideAnimations() {\n  ɵperformanceMarkFeature('NgEagerAnimations');\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideAnimations` call results in app code.\n  return [...BROWSER_ANIMATIONS_PROVIDERS];\n}\n/**\n * A null player that must be imported to allow disabling of animations.\n * @publicApi\n */\nlet NoopAnimationsModule = /*#__PURE__*/(() => {\n  class NoopAnimationsModule {\n    static ɵfac = function NoopAnimationsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NoopAnimationsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NoopAnimationsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n      imports: [BrowserModule]\n    });\n  }\n  return NoopAnimationsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the set of dependency-injection providers\n * to disable animations in an application. See [animations guide](guide/animations)\n * to learn more about animations in Angular.\n *\n * @usageNotes\n *\n * The function is useful when you want to bootstrap an application using\n * the `bootstrapApplication` function, but you need to disable animations\n * (for example, when running tests).\n *\n * ```ts\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideNoopAnimations()\n *   ]\n * });\n * ```\n *\n * @publicApi\n */\nfunction provideNoopAnimations() {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideNoopAnimations` call results in app code.\n  return [...BROWSER_NOOP_ANIMATIONS_PROVIDERS];\n}\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserAnimationsModule, NoopAnimationsModule, provideAnimations, provideNoopAnimations, InjectableAnimationEngine as ɵInjectableAnimationEngine };\n","/**\n * @license Angular v19.0.5\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ɵChangeDetectionScheduler, ɵRuntimeError, Injectable, InjectionToken, ɵperformanceMarkFeature, makeEnvironmentProviders, RendererFactory2, NgZone, ANIMATION_MODULE_TYPE } from '@angular/core';\nimport { ɵDomRendererFactory2 } from '@angular/platform-browser';\nconst ANIMATION_PREFIX = '@';\nlet AsyncAnimationRendererFactory = /*#__PURE__*/(() => {\n  class AsyncAnimationRendererFactory {\n    doc;\n    delegate;\n    zone;\n    animationType;\n    moduleImpl;\n    _rendererFactoryPromise = null;\n    scheduler = inject(ɵChangeDetectionScheduler, {\n      optional: true\n    });\n    loadingSchedulerFn = inject(ɵASYNC_ANIMATION_LOADING_SCHEDULER_FN, {\n      optional: true\n    });\n    _engine;\n    /**\n     *\n     * @param moduleImpl allows to provide a mock implmentation (or will load the animation module)\n     */\n    constructor(doc, delegate, zone, animationType, moduleImpl) {\n      this.doc = doc;\n      this.delegate = delegate;\n      this.zone = zone;\n      this.animationType = animationType;\n      this.moduleImpl = moduleImpl;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      // When the root view is removed, the renderer defers the actual work to the\n      // `TransitionAnimationEngine` to do this, and the `TransitionAnimationEngine` doesn't actually\n      // remove the DOM node, but just calls `markElementAsRemoved()`. The actual DOM node is not\n      // removed until `TransitionAnimationEngine` \"flushes\".\n      // Note: we already flush on destroy within the `InjectableAnimationEngine`. The injectable\n      // engine is not provided when async animations are used.\n      this._engine?.flush();\n    }\n    /**\n     * @internal\n     */\n    loadImpl() {\n      // Note on the `.then(m => m)` part below: Closure compiler optimizations in g3 require\n      // `.then` to be present for a dynamic import (or an import should be `await`ed) to detect\n      // the set of imported symbols.\n      const loadFn = () => this.moduleImpl ?? import('@angular/animations/browser').then(m => m);\n      let moduleImplPromise;\n      if (this.loadingSchedulerFn) {\n        moduleImplPromise = this.loadingSchedulerFn(loadFn);\n      } else {\n        moduleImplPromise = loadFn();\n      }\n      return moduleImplPromise.catch(e => {\n        throw new ɵRuntimeError(5300 /* RuntimeErrorCode.ANIMATION_RENDERER_ASYNC_LOADING_FAILURE */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Async loading for animations package was ' + 'enabled, but loading failed. Angular falls back to using regular rendering. ' + \"No animations will be displayed and their styles won't be applied.\");\n      }).then(({\n        ɵcreateEngine,\n        ɵAnimationRendererFactory\n      }) => {\n        // We can't create the renderer yet because we might need the hostElement and the type\n        // Both are provided in createRenderer().\n        this._engine = ɵcreateEngine(this.animationType, this.doc);\n        const rendererFactory = new ɵAnimationRendererFactory(this.delegate, this._engine, this.zone);\n        this.delegate = rendererFactory;\n        return rendererFactory;\n      });\n    }\n    /**\n     * This method is delegating the renderer creation to the factories.\n     * It uses default factory while the animation factory isn't loaded\n     * and will rely on the animation factory once it is loaded.\n     *\n     * Calling this method will trigger as side effect the loading of the animation module\n     * if the renderered component uses animations.\n     */\n    createRenderer(hostElement, rendererType) {\n      const renderer = this.delegate.createRenderer(hostElement, rendererType);\n      if (renderer.ɵtype === 0 /* AnimationRendererType.Regular */) {\n        // The factory is already loaded, this is an animation renderer\n        return renderer;\n      }\n      // We need to prevent the DomRenderer to throw an error because of synthetic properties\n      if (typeof renderer.throwOnSyntheticProps === 'boolean') {\n        renderer.throwOnSyntheticProps = false;\n      }\n      // Using a dynamic renderer to switch the renderer implementation once the module is loaded.\n      const dynamicRenderer = new DynamicDelegationRenderer(renderer);\n      // Kick off the module loading if the component uses animations but the module hasn't been\n      // loaded yet.\n      if (rendererType?.data?.['animation'] && !this._rendererFactoryPromise) {\n        this._rendererFactoryPromise = this.loadImpl();\n      }\n      this._rendererFactoryPromise?.then(animationRendererFactory => {\n        const animationRenderer = animationRendererFactory.createRenderer(hostElement, rendererType);\n        dynamicRenderer.use(animationRenderer);\n        this.scheduler?.notify(11 /* NotificationSource.AsyncAnimationsLoaded */);\n      }).catch(e => {\n        // Permanently use regular renderer when loading fails.\n        dynamicRenderer.use(renderer);\n      });\n      return dynamicRenderer;\n    }\n    begin() {\n      this.delegate.begin?.();\n    }\n    end() {\n      this.delegate.end?.();\n    }\n    whenRenderingDone() {\n      return this.delegate.whenRenderingDone?.() ?? Promise.resolve();\n    }\n    static ɵfac = function AsyncAnimationRendererFactory_Factory(__ngFactoryType__) {\n      i0.ɵɵinvalidFactory();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: AsyncAnimationRendererFactory,\n      factory: AsyncAnimationRendererFactory.ɵfac\n    });\n  }\n  return AsyncAnimationRendererFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The class allows to dynamicly switch between different renderer implementations\n * by changing the delegate renderer.\n */\nclass DynamicDelegationRenderer {\n  delegate;\n  // List of callbacks that need to be replayed on the animation renderer once its loaded\n  replay = [];\n  ɵtype = 1 /* AnimationRendererType.Delegated */;\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n  use(impl) {\n    this.delegate = impl;\n    if (this.replay !== null) {\n      // Replay queued actions using the animation renderer to apply\n      // all events and properties collected while loading was in progress.\n      for (const fn of this.replay) {\n        fn(impl);\n      }\n      // Set to `null` to indicate that the queue was processed\n      // and we no longer need to collect events and properties.\n      this.replay = null;\n    }\n  }\n  get data() {\n    return this.delegate.data;\n  }\n  destroy() {\n    this.replay = null;\n    this.delegate.destroy();\n  }\n  createElement(name, namespace) {\n    return this.delegate.createElement(name, namespace);\n  }\n  createComment(value) {\n    return this.delegate.createComment(value);\n  }\n  createText(value) {\n    return this.delegate.createText(value);\n  }\n  get destroyNode() {\n    return this.delegate.destroyNode;\n  }\n  appendChild(parent, newChild) {\n    this.delegate.appendChild(parent, newChild);\n  }\n  insertBefore(parent, newChild, refChild, isMove) {\n    this.delegate.insertBefore(parent, newChild, refChild, isMove);\n  }\n  removeChild(parent, oldChild, isHostElement) {\n    this.delegate.removeChild(parent, oldChild, isHostElement);\n  }\n  selectRootElement(selectorOrNode, preserveContent) {\n    return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n  }\n  parentNode(node) {\n    return this.delegate.parentNode(node);\n  }\n  nextSibling(node) {\n    return this.delegate.nextSibling(node);\n  }\n  setAttribute(el, name, value, namespace) {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n  removeAttribute(el, name, namespace) {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n  addClass(el, name) {\n    this.delegate.addClass(el, name);\n  }\n  removeClass(el, name) {\n    this.delegate.removeClass(el, name);\n  }\n  setStyle(el, style, value, flags) {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n  removeStyle(el, style, flags) {\n    this.delegate.removeStyle(el, style, flags);\n  }\n  setProperty(el, name, value) {\n    // We need to keep track of animation properties set on default renderer\n    // So we can also set them also on the animation renderer\n    if (this.shouldReplay(name)) {\n      this.replay.push(renderer => renderer.setProperty(el, name, value));\n    }\n    this.delegate.setProperty(el, name, value);\n  }\n  setValue(node, value) {\n    this.delegate.setValue(node, value);\n  }\n  listen(target, eventName, callback) {\n    // We need to keep track of animation events registred by the default renderer\n    // So we can also register them against the animation renderer\n    if (this.shouldReplay(eventName)) {\n      this.replay.push(renderer => renderer.listen(target, eventName, callback));\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n  shouldReplay(propOrEventName) {\n    //`null` indicates that we no longer need to collect events and properties\n    return this.replay !== null && propOrEventName.startsWith(ANIMATION_PREFIX);\n  }\n}\n/**\n * Provides a custom scheduler function for the async loading of the animation package.\n *\n * Private token for investigation purposes\n */\nconst ɵASYNC_ANIMATION_LOADING_SCHEDULER_FN = /*#__PURE__*/new InjectionToken(ngDevMode ? 'async_animation_loading_scheduler_fn' : '');\n\n/**\n * Returns the set of dependency-injection providers\n * to enable animations in an application. See [animations guide](guide/animations)\n * to learn more about animations in Angular.\n *\n * When you use this function instead of the eager `provideAnimations()`, animations won't be\n * rendered until the renderer is loaded.\n *\n * @usageNotes\n *\n * The function is useful when you want to enable animations in an application\n * bootstrapped using the `bootstrapApplication` function. In this scenario there\n * is no need to import the `BrowserAnimationsModule` NgModule at all, just add\n * providers returned by this function to the `providers` list as show below.\n *\n * ```ts\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideAnimationsAsync()\n *   ]\n * });\n * ```\n *\n * @param type pass `'noop'` as argument to disable animations.\n *\n * @publicApi\n */\nfunction provideAnimationsAsync(type = 'animations') {\n  ɵperformanceMarkFeature('NgAsyncAnimations');\n  return makeEnvironmentProviders([{\n    provide: RendererFactory2,\n    useFactory: (doc, renderer, zone) => {\n      return new AsyncAnimationRendererFactory(doc, renderer, zone, type);\n    },\n    deps: [DOCUMENT, ɵDomRendererFactory2, NgZone]\n  }, {\n    provide: ANIMATION_MODULE_TYPE,\n    useValue: type === 'noop' ? 'NoopAnimations' : 'BrowserAnimations'\n  }]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideAnimationsAsync, ɵASYNC_ANIMATION_LOADING_SCHEDULER_FN, AsyncAnimationRendererFactory as ɵAsyncAnimationRendererFactory };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nconst fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\nlet SweetAlert2LoaderService = /*#__PURE__*/(() => {\n  class SweetAlert2LoaderService {\n    swalProvider;\n    swalPromiseCache;\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    constructor(swalProvider) {\n      this.swalProvider = swalProvider;\n    }\n    get swal() {\n      if (!this.swalPromiseCache) {\n        this.preloadSweetAlertLibrary();\n      }\n      return this.swalPromiseCache;\n    }\n    preloadSweetAlertLibrary() {\n      if (this.swalPromiseCache) return;\n      const libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n      this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n      function isLoader(value) {\n        return typeof value === 'function' && value.version === undefined;\n      }\n      function isDefaultExport(value) {\n        return typeof value === 'function';\n      }\n    }\n    static ɵfac = function SweetAlert2LoaderService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SweetAlert2LoaderService)(i0.ɵɵinject(swalProviderToken));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SweetAlert2LoaderService,\n      factory: SweetAlert2LoaderService.ɵfac\n    });\n  }\n  return SweetAlert2LoaderService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\nlet SwalComponent = /*#__PURE__*/(() => {\n  class SwalComponent {\n    sweetAlert2Loader;\n    moduleLevelFireOnInit;\n    moduleLevelDismissOnDestroy;\n    title;\n    titleText;\n    text;\n    html;\n    footer;\n    icon;\n    iconColor;\n    iconHtml;\n    backdrop;\n    toast;\n    target;\n    input;\n    width;\n    padding;\n    background;\n    position;\n    grow;\n    showClass;\n    hideClass;\n    customClass;\n    timer;\n    timerProgressBar;\n    heightAuto;\n    allowOutsideClick;\n    allowEscapeKey;\n    allowEnterKey;\n    stopKeydownPropagation;\n    keydownListenerCapture;\n    showConfirmButton;\n    showDenyButton;\n    showCancelButton;\n    confirmButtonText;\n    denyButtonText;\n    cancelButtonText;\n    confirmButtonColor;\n    denyButtonColor;\n    cancelButtonColor;\n    confirmButtonAriaLabel;\n    denyButtonAriaLabel;\n    cancelButtonAriaLabel;\n    buttonsStyling;\n    reverseButtons;\n    focusConfirm;\n    focusDeny;\n    focusCancel;\n    showCloseButton;\n    closeButtonHtml;\n    closeButtonAriaLabel;\n    loaderHtml;\n    showLoaderOnConfirm;\n    preConfirm;\n    preDeny;\n    imageUrl;\n    imageWidth;\n    imageHeight;\n    imageAlt;\n    inputLabel;\n    inputPlaceholder;\n    inputValue;\n    inputOptions;\n    inputAutoTrim;\n    inputAttributes;\n    inputValidator;\n    returnInputValueOnDeny;\n    validationMessage;\n    progressSteps;\n    currentProgressStep;\n    progressStepsDistance;\n    scrollbarPadding;\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    set swalOptions(options) {\n      //=> Update properties\n      Object.assign(this, options);\n      //=> Mark changed properties as touched\n      const touchedKeys = Object.keys(options);\n      touchedKeys.forEach(this.markTouched);\n    }\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    get swalOptions() {\n      //=> We will compute the options object based on the option keys that are known to have changed.\n      //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n      //   avoiding side effects.\n      return [...this.touchedProps].reduce((obj, key) => ({\n        ...obj,\n        [key]: this[key]\n      }), {});\n    }\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    swalFireOnInit;\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    swalDismissOnDestroy;\n    set swalVisible(visible) {\n      visible ? this.fire() : this.close();\n    }\n    get swalVisible() {\n      return this.isCurrentlyShown;\n    }\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    willOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    didOpen = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n     * repainted on the screen).\n     * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n     * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n     * {@link willOpen}.\n     */\n    didRender = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n     * being fired).\n     */\n    willClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n     * another popup being fired).\n     */\n    didClose = new EventEmitter();\n    /**\n     * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n     * popup.\n     * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n     * {@link didDestroy} over {@link didClose}.\n     */\n    didDestroy = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link close} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    dismiss = new EventEmitter();\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    touchedProps = new Set();\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    markTouched = this.touchedProps.add.bind(this.touchedProps);\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    isCurrentlyShown = false;\n    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n      this.sweetAlert2Loader = sweetAlert2Loader;\n      this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n      this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ngOnInit() {\n      //=> Preload SweetAlert2 library in case this component is activated.\n      this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    ngAfterViewInit() {\n      const fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n      fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    ngOnChanges(changes) {\n      //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n      //   send it with the next fire() or update() calls.\n      Object.keys(changes)\n      //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n      .filter(key => !key.startsWith('swal')).forEach(this.markTouched);\n      //=> Eventually trigger re-render if the modal is open.\n      void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    ngOnDestroy() {\n      //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n      const dismissOnDestroy = this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n      dismissOnDestroy && this.close();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n     */\n    async fire() {\n      const swal = await this.sweetAlert2Loader.swal;\n      const userOptions = this.swalOptions;\n      //=> Build the SweetAlert2 options\n      const options = {\n        //=> Merge with calculated options set for that specific swal\n        ...userOptions,\n        //=> Handle modal lifecycle events\n        willOpen: composeHook(userOptions.willOpen, modalElement => {\n          this.willOpen.emit({\n            modalElement\n          });\n        }),\n        didOpen: composeHook(userOptions.didOpen, modalElement => {\n          this.isCurrentlyShown = true;\n          this.didOpen.emit({\n            modalElement\n          });\n        }),\n        didRender: composeHook(userOptions.didRender, modalElement => {\n          this.didRender.emit({\n            modalElement\n          });\n        }),\n        willClose: composeHook(userOptions.willClose, modalElement => {\n          this.isCurrentlyShown = false;\n          this.willClose.emit({\n            modalElement\n          });\n        }),\n        didClose: composeHook(userOptions.didClose, () => {\n          this.didClose.emit();\n        }),\n        didDestroy: composeHook(userOptions.didDestroy, () => {\n          this.didDestroy.emit();\n        })\n      };\n      //=> Show the Swal! And wait for confirmation or dimissal.\n      const result = await swal.fire(options);\n      //=> Emit on (confirm), (deny) or (dismiss)\n      switch (true) {\n        case result.isConfirmed:\n          this.confirm.emit(result.value);\n          break;\n        case result.isDenied:\n          this.deny.emit();\n          break;\n        case result.isDismissed:\n          this.dismiss.emit(result.dismiss);\n          break;\n      }\n      return result;\n      function composeHook(userHook, libHook) {\n        return (...args) => (libHook(...args), userHook?.(...args));\n      }\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n     *               {@see Swal.close}.\n     */\n    async close(result) {\n      if (!this.isCurrentlyShown) return;\n      const swal = await this.sweetAlert2Loader.swal;\n      swal.close(result);\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    async update(options) {\n      if (options) {\n        this.swalOptions = options;\n      }\n      if (!this.isCurrentlyShown) return;\n      const swal = await this.sweetAlert2Loader.swal;\n      const allOptions = this.swalOptions;\n      const updatableOptions = Object.keys(allOptions).filter(swal.isUpdatableParameter).reduce((obj, key) => ({\n        ...obj,\n        [key]: allOptions[key]\n      }), {});\n      swal.update(updatableOptions);\n    }\n    static ɵfac = function SwalComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwalComponent)(i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(fireOnInitToken), i0.ɵɵdirectiveInject(dismissOnDestroyToken));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SwalComponent,\n      selectors: [[\"swal\"]],\n      inputs: {\n        title: \"title\",\n        titleText: \"titleText\",\n        text: \"text\",\n        html: \"html\",\n        footer: \"footer\",\n        icon: \"icon\",\n        iconColor: \"iconColor\",\n        iconHtml: \"iconHtml\",\n        backdrop: \"backdrop\",\n        toast: \"toast\",\n        target: \"target\",\n        input: \"input\",\n        width: \"width\",\n        padding: \"padding\",\n        background: \"background\",\n        position: \"position\",\n        grow: \"grow\",\n        showClass: \"showClass\",\n        hideClass: \"hideClass\",\n        customClass: \"customClass\",\n        timer: \"timer\",\n        timerProgressBar: \"timerProgressBar\",\n        heightAuto: \"heightAuto\",\n        allowOutsideClick: \"allowOutsideClick\",\n        allowEscapeKey: \"allowEscapeKey\",\n        allowEnterKey: \"allowEnterKey\",\n        stopKeydownPropagation: \"stopKeydownPropagation\",\n        keydownListenerCapture: \"keydownListenerCapture\",\n        showConfirmButton: \"showConfirmButton\",\n        showDenyButton: \"showDenyButton\",\n        showCancelButton: \"showCancelButton\",\n        confirmButtonText: \"confirmButtonText\",\n        denyButtonText: \"denyButtonText\",\n        cancelButtonText: \"cancelButtonText\",\n        confirmButtonColor: \"confirmButtonColor\",\n        denyButtonColor: \"denyButtonColor\",\n        cancelButtonColor: \"cancelButtonColor\",\n        confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n        denyButtonAriaLabel: \"denyButtonAriaLabel\",\n        cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n        buttonsStyling: \"buttonsStyling\",\n        reverseButtons: \"reverseButtons\",\n        focusConfirm: \"focusConfirm\",\n        focusDeny: \"focusDeny\",\n        focusCancel: \"focusCancel\",\n        showCloseButton: \"showCloseButton\",\n        closeButtonHtml: \"closeButtonHtml\",\n        closeButtonAriaLabel: \"closeButtonAriaLabel\",\n        loaderHtml: \"loaderHtml\",\n        showLoaderOnConfirm: \"showLoaderOnConfirm\",\n        preConfirm: \"preConfirm\",\n        preDeny: \"preDeny\",\n        imageUrl: \"imageUrl\",\n        imageWidth: \"imageWidth\",\n        imageHeight: \"imageHeight\",\n        imageAlt: \"imageAlt\",\n        inputLabel: \"inputLabel\",\n        inputPlaceholder: \"inputPlaceholder\",\n        inputValue: \"inputValue\",\n        inputOptions: \"inputOptions\",\n        inputAutoTrim: \"inputAutoTrim\",\n        inputAttributes: \"inputAttributes\",\n        inputValidator: \"inputValidator\",\n        returnInputValueOnDeny: \"returnInputValueOnDeny\",\n        validationMessage: \"validationMessage\",\n        progressSteps: \"progressSteps\",\n        currentProgressStep: \"currentProgressStep\",\n        progressStepsDistance: \"progressStepsDistance\",\n        scrollbarPadding: \"scrollbarPadding\",\n        swalOptions: \"swalOptions\",\n        swalFireOnInit: \"swalFireOnInit\",\n        swalDismissOnDestroy: \"swalDismissOnDestroy\",\n        swalVisible: \"swalVisible\"\n      },\n      outputs: {\n        willOpen: \"willOpen\",\n        didOpen: \"didOpen\",\n        didRender: \"didRender\",\n        willClose: \"willClose\",\n        didClose: \"didClose\",\n        didDestroy: \"didDestroy\",\n        confirm: \"confirm\",\n        deny: \"deny\",\n        dismiss: \"dismiss\"\n      },\n      standalone: false,\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 0,\n      vars: 0,\n      template: function SwalComponent_Template(rf, ctx) {},\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return SwalComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nlet SwalDirective = /*#__PURE__*/(() => {\n  class SwalDirective {\n    viewContainerRef;\n    resolver;\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    set swal(options) {\n      if (options instanceof SwalComponent) {\n        this.swalInstance = options;\n      } else if (isArrayOptions(options)) {\n        this.swalOptions = {};\n        [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n      } else {\n        this.swalOptions = options;\n      }\n      function isArrayOptions(value) {\n        return Array.isArray(options);\n      }\n    }\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    deny = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link dismiss} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    dismiss = new EventEmitter();\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    swalRef;\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    swalInstance;\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    swalOptions;\n    constructor(viewContainerRef, resolver) {\n      this.viewContainerRef = viewContainerRef;\n      this.resolver = resolver;\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n     * (deny) and (dismiss) outputs to reemit on the directive.\n     */\n    ngOnInit() {\n      if (!this.swalInstance) {\n        const factory = this.resolver.resolveComponentFactory(SwalComponent);\n        this.swalRef = this.viewContainerRef.createComponent(factory);\n        this.swalInstance = this.swalRef.instance;\n      }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    ngOnDestroy() {\n      if (this.swalRef) {\n        this.swalRef.destroy();\n      }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick(event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      if (!this.swalInstance) return;\n      if (this.swalOptions) {\n        this.swalInstance.swalOptions = this.swalOptions;\n      }\n      const swalClosed = new Subject();\n      this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n      this.swalInstance.deny.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.deny.emit(v));\n      this.swalInstance.dismiss.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.dismiss.emit(v));\n      this.swalInstance.fire().then(() => swalClosed.next());\n    }\n    static ɵfac = function SwalDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwalDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: SwalDirective,\n      selectors: [[\"\", \"swal\", \"\"]],\n      hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n            return ctx.onClick($event);\n          });\n        }\n      },\n      inputs: {\n        swal: \"swal\"\n      },\n      outputs: {\n        confirm: \"confirm\",\n        deny: \"deny\",\n        dismiss: \"dismiss\"\n      },\n      standalone: false\n    });\n  }\n  return SwalDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nlet SwalPortalComponent = /*#__PURE__*/(() => {\n  class SwalPortalComponent {\n    template = null;\n    static ɵfac = function SwalPortalComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwalPortalComponent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SwalPortalComponent,\n      selectors: [[\"swal-portal\"]],\n      inputs: {\n        template: \"template\"\n      },\n      standalone: false,\n      decls: 1,\n      vars: 1,\n      consts: [[4, \"ngTemplateOutlet\"]],\n      template: function SwalPortalComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n        }\n      },\n      dependencies: [i1.NgTemplateOutlet],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return SwalPortalComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nlet SwalPortalTargets = /*#__PURE__*/(() => {\n  class SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    closeButton = {\n      element: swal => swal.getCloseButton(),\n      options: {\n        showCloseButton: true\n      }\n    };\n    /**\n     * Targets the modal title block contents.\n     */\n    title = {\n      element: swal => swal.getTitle(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        title: ' '\n      }\n    };\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    content = {\n      element: swal => swal.getHtmlContainer(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        text: ' '\n      }\n    };\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    actions = {\n      element: swal => swal.getActions(),\n      // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n      options: {\n        showConfirmButton: true\n      }\n    };\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    confirmButton = {\n      element: swal => swal.getConfirmButton(),\n      options: {\n        showConfirmButton: true\n      }\n    };\n    /**\n     * Targets the deny button contents, replacing the text inside it (not the button itself)\n     */\n    denyButton = {\n      element: swal => swal.getDenyButton(),\n      options: {\n        showDenyButton: true\n      }\n    };\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    cancelButton = {\n      element: swal => swal.getCancelButton(),\n      options: {\n        showCancelButton: true\n      }\n    };\n    /**\n     * Targets the modal footer contents.\n     */\n    footer = {\n      element: swal => swal.getFooter(),\n      // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n      options: {\n        footer: ' '\n      }\n    };\n    static ɵfac = function SwalPortalTargets_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwalPortalTargets)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SwalPortalTargets,\n      factory: SwalPortalTargets.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SwalPortalTargets;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nlet SwalPortalDirective = /*#__PURE__*/(() => {\n  class SwalPortalDirective {\n    resolver;\n    injector;\n    app;\n    templateRef;\n    sweetAlert2Loader;\n    swalTargets;\n    swalComponent;\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    target;\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    portalComponentRef;\n    destroyed = new Subject();\n    constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n      this.resolver = resolver;\n      this.injector = injector;\n      this.app = app;\n      this.templateRef = templateRef;\n      this.sweetAlert2Loader = sweetAlert2Loader;\n      this.swalTargets = swalTargets;\n      this.swalComponent = swalComponent;\n    }\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    ngOnInit() {\n      // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n      this.target = this.target || this.swalTargets.content;\n      //=> Apply the options provided by the target definition\n      void this.swalComponent.update(this.target.options);\n      //=> Subscribe to a few hooks frm the parent SwalComponent.\n      this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n      this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n      this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    ngOnDestroy() {\n      this.destroyed.next();\n    }\n    /**\n     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link willOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    async didRenderHook() {\n      //=> Ensure the portal component is created\n      if (!this.portalComponentRef) {\n        this.portalComponentRef = this.createPortalComponent();\n      }\n      //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n      // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n      // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n      // the portal component is fully synchronous, causing no blinks in the modal contents.\n      const swal = await this.sweetAlert2Loader.swal;\n      //=> Find target element\n      const targetEl = this.target.element(swal);\n      if (!targetEl) return;\n      //=> Replace target's contents with our component\n      // https://jsperf.com/innerhtml-vs-removechild/15\n      while (targetEl.firstChild) {\n        targetEl.removeChild(targetEl.firstChild);\n      }\n      targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n    /**\n     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    willOpenHook() {\n      if (!this.portalComponentRef) return;\n      //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n      this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    didDestroyHook() {\n      if (!this.portalComponentRef) return;\n      //=> Detach the portal component from the app and destroy it\n      this.app.detachView(this.portalComponentRef.hostView);\n      this.portalComponentRef.destroy();\n      this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    createPortalComponent() {\n      //=> Create the SwalPortalComponent that will hold our content\n      const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n      // Yes, we do not use the third argument that would directly use the target as the component's view\n      // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n      // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n      // able to restore it at any moment, ie. after the modal has been re-rendered.\n      const componentRef = factory.create(this.injector, []);\n      //=> Apply the consumer's template on the component\n      componentRef.instance.template = this.templateRef;\n      return componentRef;\n    }\n    static ɵfac = function SwalPortalDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SwalPortalDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(SweetAlert2LoaderService), i0.ɵɵdirectiveInject(SwalPortalTargets), i0.ɵɵdirectiveInject(SwalComponent, 1));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: SwalPortalDirective,\n      selectors: [[\"\", \"swalPortal\", \"\"]],\n      inputs: {\n        target: [0, \"swalPortal\", \"target\"]\n      },\n      standalone: false\n    });\n  }\n  return SwalPortalDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideDefaultSwal() {\n  return import('sweetalert2');\n}\nlet SweetAlert2Module = /*#__PURE__*/(() => {\n  class SweetAlert2Module {\n    static forRoot(options = {}) {\n      return {\n        ngModule: SweetAlert2Module,\n        providers: [SweetAlert2LoaderService, {\n          provide: swalProviderToken,\n          useValue: options.provideSwal || provideDefaultSwal\n        }, {\n          provide: fireOnInitToken,\n          useValue: options.fireOnInit || false\n        }, {\n          provide: dismissOnDestroyToken,\n          useValue: options.dismissOnDestroy || true\n        }]\n      };\n    }\n    static forChild(options = {}) {\n      return {\n        ngModule: SweetAlert2Module,\n        providers: [...(options.provideSwal ? [SweetAlert2LoaderService, {\n          provide: swalProviderToken,\n          useValue: options.provideSwal\n        }] : []), ...(options.fireOnInit !== undefined ? [{\n          provide: fireOnInitToken,\n          useValue: options.fireOnInit\n        }] : []), ...(options.dismissOnDestroy !== undefined ? [{\n          provide: dismissOnDestroyToken,\n          useValue: options.dismissOnDestroy\n        }] : [])]\n      };\n    }\n    static ɵfac = function SweetAlert2Module_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SweetAlert2Module)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: SweetAlert2Module\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return SweetAlert2Module;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module };\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'LoginAngular.aspx',\n    loadChildren: () => import('./modules/auth/login/login.module').then((m) => m.LoginModule)\n  },\n  {\n    path: 'ForgotPassword.aspx',\n    loadChildren: () =>\n      import('./modules/auth/forgot-password/forgot-password.module').then((m) => m.ForgotPasswordModule)\n  },\n  {\n    path: 'AngularReports.aspx',\n    loadChildren: () => import('./modules/streaming/reports/reports.module').then((m) => m.ReportsModule)\n  },\n  {\n    path: 'CameraSettings.aspx',\n    loadChildren: () =>\n      import('./modules/settings/camera-settings/camera-settings.module').then((m) => m.CameraSettingsModule)\n  },\n  {\n    path: 'DeviceLiveLocation.aspx',\n    loadChildren: () =>\n      import('./modules/dashboard/camera-realtime-map/camera-realtime-map.module').then(\n        (m) => m.CameraRealtimeMapModule\n      )\n  },\n  {\n    path: 'Webrtcfeeds.aspx',\n    loadChildren: () => import('./modules/streaming/webrtc-feeds/webrtc-feeds.module').then((m) => m.WebrtcFeedsModule)\n  },\n  {\n    path: 'AngularSession.aspx',\n    loadChildren: () => import('./modules/media/session/session.module').then((m) => m.SessionModule)\n  },\n  { path: '', pathMatch: 'full', redirectTo: 'AngularSession.aspx' },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { HttpEvent, HttpRequest, HttpHandlerFn } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { AuthService } from 'src/app/core/auth/auth.service';\n\nexport function headerInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const JWTToken = new AuthService().token;\n\n  const requestWithAuthorization = req.clone({\n    headers: req.headers.set('Authorization', `Bearer ${JWTToken}`)\n  });\n\n  return next(requestWithAuthorization);\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\n\nimport { ToastrModule } from 'ngx-toastr';\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\nimport { NgxPageScrollCoreModule } from 'ngx-page-scroll-core';\n\nimport { AllCommunityModule, ModuleRegistry, provideGlobalGridOptions, themeQuartz } from 'ag-grid-community';\nimport { MultiFilterModule } from 'ag-grid-enterprise';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { headerInterceptor } from './modules/shared/interceptors/http-interceptor';\nimport { SharedModule } from './modules/shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot({\n      timeOut: 3000,\n      positionClass: 'toast-top-right',\n      preventDuplicates: true\n    }),\n    SweetAlert2Module.forRoot(),\n    NgxPageScrollCoreModule,\n    SharedModule.forRoot()\n  ],\n  providers: [provideAnimationsAsync(), provideHttpClient(withInterceptors([headerInterceptor]))],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor() {\n    ModuleRegistry.registerModules([AllCommunityModule]);\n    provideGlobalGridOptions({ theme: themeQuartz });\n  }\n}\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\n// bootstrapApplication(AppComponent, appConfig)\n//   .catch((err) => console.error(err));\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"],"mappings":"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","names":["InjectableAnimationEngine","AnimationEngine","doc","driver","normalizer","__ngFactoryType__","ɵɵinject","DOCUMENT","AnimationDriver","AnimationStyleNormalizer","ɵɵdefineInjectable","instantiateDefaultStyleNormalizer","WebAnimationsStyleNormalizer","instantiateRendererFactory","renderer","engine","zone","AnimationRendererFactory","SHARED_ANIMATION_PROVIDERS","RendererFactory2","DomRendererFactory2","NgZone","BROWSER_ANIMATIONS_PROVIDERS","WebAnimationsDriver","ANIMATION_MODULE_TYPE","BROWSER_NOOP_ANIMATIONS_PROVIDERS","NoopAnimationDriver","BrowserAnimationsModule","config","ɵɵdefineNgModule","ɵɵdefineInjector","BrowserModule","ANIMATION_PREFIX","AsyncAnimationRendererFactory","inject","ChangeDetectionScheduler","ɵASYNC_ANIMATION_LOADING_SCHEDULER_FN","doc","delegate","zone","animationType","moduleImpl","loadFn","m","moduleImplPromise","e","RuntimeError","ɵcreateEngine","ɵAnimationRendererFactory","rendererFactory","hostElement","rendererType","renderer","dynamicRenderer","DynamicDelegationRenderer","animationRendererFactory","animationRenderer","__ngFactoryType__","ɵɵinvalidFactory","ɵɵdefineInjectable","impl","fn","name","namespace","value","parent","newChild","refChild","isMove","oldChild","isHostElement","selectorOrNode","preserveContent","node","el","style","flags","target","eventName","callback","propOrEventName","InjectionToken","provideAnimationsAsync","type","performanceMarkFeature","makeEnvironmentProviders","RendererFactory2","DOCUMENT","DomRendererFactory2","NgZone","ANIMATION_MODULE_TYPE","swalProviderToken","InjectionToken","fireOnInitToken","dismissOnDestroyToken","SweetAlert2LoaderService","swalProvider","libPromise","isLoader","value","isDefaultExport","__ngFactoryType__","ɵɵinject","ɵɵdefineInjectable","provideDefaultSwal","SweetAlert2Module","options","SweetAlert2LoaderService","swalProviderToken","fireOnInitToken","dismissOnDestroyToken","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","CommonModule","routes","path","loadChildren","then","m","LoginModule","ForgotPasswordModule","ReportsModule","CameraSettingsModule","CameraRealtimeMapModule","WebrtcFeedsModule","SessionModule","pathMatch","redirectTo","AppRoutingModule","RouterModule","forRoot","useHash","headerInterceptor","req","next","JWTToken","AuthService","token","requestWithAuthorization","clone","headers","set","AppModule","constructor","ModuleRegistry","registerModules","AllCommunityModule","provideGlobalGridOptions","theme","themeQuartz","bootstrap","AppComponent","provideAnimationsAsync","provideHttpClient","withInterceptors","headerInterceptor","imports","BrowserModule","CommonModule","AppRoutingModule","BrowserAnimationsModule","ToastrModule","forRoot","timeOut","positionClass","preventDuplicates","SweetAlert2Module","NgxPageScrollCoreModule","SharedModule","platformBrowser","bootstrapModule","AppModule","catch","err","console","error"],"x_google_ignoreList":[0,1,2]}