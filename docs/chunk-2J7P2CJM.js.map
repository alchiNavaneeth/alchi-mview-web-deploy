{
  "version": 3,
  "sources": ["src/app/modules/streaming/webrtc-feeds/webrtc-feeds.component.ts", "src/app/modules/streaming/webrtc-feeds/webrtc-feeds.component.html", "src/app/modules/streaming/webrtc-feeds/webrtc-feeds-routing.module.ts", "src/app/modules/streaming/webrtc-feeds/webrtc-feeds.module.ts"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AppComponent } from 'src/app/app.component';\n\n@Component({\n  standalone: false,\n  selector: 'app-webrtc-feeds',\n  templateUrl: './webrtc-feeds.component.html',\n  styleUrl: './webrtc-feeds.component.scss'\n})\nexport class WebrtcFeedsComponent implements OnInit, OnDestroy {\n  public currentScreen: 'WebrtcfeedsScreen' | 'AccessDeniedScreen' | 'WebrtcfeedsErrorScreen' = 'WebrtcfeedsScreen';\n\n  year?: number;\n  player: any;\n  public version: string = '';\n\n  public streamName: string = '';\n  public applicationName: string = '';\n  public wssUrl: string = '';\n  public TokenExpiryTime: string = '';\n  public LocalExpiryDate: Date = new Date();\n\n  wsConnection: WebSocket | null = null;\n  videoElement: HTMLVideoElement | null = null;\n  peerConnection: RTCPeerConnection | null = null;\n  repeaterRetryCount = 0;\n\n  constructor(app: AppComponent) {\n    this.year = new Date().getFullYear();\n    this.currentScreen = app.getAttribute('screen');\n\n    this.streamName = (window as any)['streamName'];\n    this.applicationName = (window as any)['applicationName'];\n    this.wssUrl = (window as any)['wssUrl'];\n    this.TokenExpiryTime = (window as any)['TokenExpiryTime'];\n\n    this.LocalExpiryDate = new Date(this.TokenExpiryTime + ' UTC');\n    console.log(this.LocalExpiryDate);\n    console.log('constructor');\n    console.log('currentScreen ' + this.currentScreen);\n    console.log('streamName ' + this.streamName);\n    console.log('applicationName ' + this.applicationName);\n    console.log('wssUrl ' + this.wssUrl);\n  }\n\n  wsConnect() {\n    const streamInfo = { applicationName: this.applicationName, streamName: this.streamName };\n    const userData = { iceServers: [] };\n    this.peerConnection = new RTCPeerConnection(userData);\n\n    try {\n      this.wsConnection = new WebSocket(this.wssUrl);\n    } catch (e) {\n      console.log(e);\n    }\n\n    if (this.wsConnection) {\n      this.wsConnection.binaryType = 'arraybuffer';\n\n      this.wsConnection.onopen = () => {\n        console.log('onopen');\n\n        this.peerConnection!.onicecandidate = this.gotIceCandidate;\n\n        this.peerConnection!.ontrack = (event) => {\n          console.log('gotRemoteTrack: kind:' + event.track.kind + ' stream:' + event.streams[0]);\n          try {\n            this.videoElement!.srcObject = event.streams[0];\n          } catch (error) {\n            console.error('Error assigning stream to video element', error);\n          }\n        };\n        this.sendPlayGetOffer(streamInfo, userData);\n      };\n\n      this.wsConnection.onmessage = (evt) => {\n        console.log('wsConnection.onmessage: ' + evt.data);\n        this.handleWsMessage(evt, streamInfo, userData);\n      };\n\n      this.wsConnection.onclose = () => {\n        console.log('wsConnection.onclose');\n      };\n\n      this.wsConnection.onerror = (evt) => {\n        console.log(evt);\n      };\n    }\n  }\n\n  sendPlayGetOffer(streamInfo: any, userData: any) {\n    console.log('sendPlayGetOffer: ' + JSON.stringify(streamInfo));\n    this.wsConnection!.send(\n      JSON.stringify({\n        direction: 'play',\n        command: 'getOffer',\n        streamInfo: streamInfo,\n        userData: userData\n      })\n    );\n  }\n\n  gotIceCandidate = (event: RTCPeerConnectionIceEvent) => {\n    if (event.candidate) {\n      this.wsConnection!.send(JSON.stringify({ ice: event.candidate }));\n    }\n  };\n\n  handleWsMessage(evt: MessageEvent, streamInfo: any, userData: any) {\n    const msgJSON = JSON.parse(evt.data);\n    const msgStatus = Number(msgJSON.status);\n    const msgCommand = msgJSON.command;\n\n    if (msgStatus === 514) {\n      // repeater stream not ready\n      this.repeaterRetryCount++;\n      if (this.repeaterRetryCount < 10) {\n        setTimeout(() => this.sendPlayGetOffer(streamInfo, userData), 500);\n      } else {\n        console.log('Live stream repeater timeout: ' + this.streamName);\n        this.stop();\n      }\n    } else if (msgStatus !== 200) {\n      console.log(msgJSON.statusDescription);\n      this.stop();\n      this.currentScreen = 'WebrtcfeedsErrorScreen';\n    } else {\n      this.handleSdpAndIce(msgJSON, streamInfo, userData);\n    }\n\n    if (msgCommand === 'sendResponse' && this.wsConnection) {\n      this.wsConnection.close();\n      this.wsConnection = null;\n    }\n  }\n\n  handleSdpAndIce(msgJSON: any, streamInfo: any, userData: any) {\n    if (msgJSON.streamInfo) {\n      streamInfo.sessionId = msgJSON.streamInfo.sessionId;\n    }\n\n    const sdpData = msgJSON.sdp;\n    if (sdpData) {\n      console.log('sdp: ' + JSON.stringify(sdpData));\n\n      if (this.mungeSDP) {\n        msgJSON.sdp.sdp = this.mungeSDP(msgJSON.sdp.sdp);\n      }\n\n      console.log('SDP Data: ' + msgJSON.sdp.sdp);\n\n      this.peerConnection!.setRemoteDescription(new RTCSessionDescription(msgJSON.sdp))\n        .then(() =>\n          this.peerConnection!.createAnswer().then((description) => {\n            this.peerConnection!.setLocalDescription(description)\n              .then(() => {\n                console.log('sendAnswer');\n                this.wsConnection!.send(\n                  JSON.stringify({\n                    direction: 'play',\n                    command: 'sendResponse',\n                    streamInfo: streamInfo,\n                    sdp: description,\n                    userData: userData\n                  })\n                );\n              })\n              .catch((err) => console.log('set local description error', err));\n          })\n        )\n        .catch((err) => console.log('set remote description error', err));\n    }\n\n    const iceCandidates = msgJSON.iceCandidates;\n    if (iceCandidates) {\n      for (const candidate of iceCandidates) {\n        console.log('iceCandidates: ' + JSON.stringify(candidate));\n        this.peerConnection!.addIceCandidate(new RTCIceCandidate(candidate));\n      }\n    }\n  }\n\n  mungeSDP(sdpStr: string): string {\n    let sdpLines = sdpStr.split(/\\r\\n/);\n    let sdpStrRet = '';\n\n    for (let sdpLine of sdpLines) {\n      if (sdpLine.length === 0) continue;\n\n      if (sdpLine.includes('profile-level-id')) {\n        let profileLevelIdIndex = sdpLine.indexOf('profile-level-id') + 17;\n        let profileLevelId = sdpLine.substring(profileLevelIdIndex, profileLevelIdIndex + 6);\n        let profile = parseInt(profileLevelId.substring(0, 2), 16);\n        let constraint = parseInt(profileLevelId.substring(2, 4), 16);\n        let level = parseInt(profileLevelId.substring(4, 6), 16);\n\n        if (profile > 0x42) {\n          profile = 0x42;\n          constraint = 0xe0;\n          level = 0x1f;\n        }\n\n        let newProfileLevelId =\n          ('00' + profile.toString(16)).slice(-2).toLowerCase() +\n          ('00' + constraint.toString(16)).slice(-2).toLowerCase() +\n          ('00' + level.toString(16)).slice(-2).toLowerCase();\n\n        sdpLine = sdpLine.replace(profileLevelId, newProfileLevelId);\n      }\n\n      sdpStrRet += sdpLine + '\\r\\n';\n    }\n\n    return sdpStrRet;\n  }\n\n  stop() {\n    if (this.peerConnection) {\n      this.peerConnection.close();\n    }\n    if (this.wsConnection) {\n      this.wsConnection.close();\n    }\n    this.peerConnection = null;\n    this.wsConnection = null;\n    if (this.videoElement) {\n      this.videoElement.srcObject = null;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    console.log('ngAfterViewInit');\n\n    if (this.currentScreen === 'WebrtcfeedsScreen') {\n      if (this.applicationName === '' || this.streamName === '' || this.wssUrl === '') {\n        alert('Please fill out the connection details');\n      } else {\n        this.videoElement = document.getElementById('player-video') as HTMLVideoElement;\n        this.wsConnect();\n      }\n    }\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.stop();\n  }\n}\n", "<div *ngIf=\"currentScreen === 'WebrtcfeedsScreen'\" id=\"webrtcfeeds-component\" class=\"h-100 bg-image\">\n  <div class=\"g-0 overlay\">\n    <div class=\"screen-card\">\n      <div class=\"logo\">\n        <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" />\n      </div>\n      <div class=\"input-heading\">\n        This livestream will expire as soon as it is ended by the user or by “{{\n          LocalExpiryDate | date : 'dd/MM/yyyy h:mm:ss a'\n        }}”\n      </div>\n      <div class=\"mfr-content\">\n        <video\n          height=\"500\"\n          width=\"500\"\n          id=\"player-video\"\n          oncanplay=\"this.play()\"\n          onloadedmetadata=\"this.muted = true\"\n          autoplay\n          playsinline\n          muted\n          controls\n        ></video>\n      </div>\n    </div>\n\n    <div class=\"term-of-services\">\n      <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd</div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"currentScreen === 'AccessDeniedScreen'\" id=\"accessdenied-component\" class=\"h-100 bg-image\">\n  <div class=\"g-0 overlay\">\n    <div class=\"screen-card\">\n      <div class=\"logo\">\n        <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" />\n      </div>\n      <div class=\"mfr-title\">Access Denied</div>\n      <div class=\"input-heading\">You are not authorised to access this livestream or the link has expired.</div>\n    </div>\n\n    <div class=\"term-of-services\">\n      <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd</div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"currentScreen === 'WebrtcfeedsErrorScreen'\" id=\"webrtcfeedserror-component\" class=\"h-100 bg-image\">\n  <div class=\"g-0 overlay\">\n    <div class=\"screen-card\">\n      <div class=\"logo\">\n        <img src=\"assets/img/c8b00319-2bb7-4001-9316-580b17ffc717_480.png\" />\n      </div>\n      <div class=\"mfr-title\">Streamed Error</div>\n      <div class=\"input-heading\">Live stream is not Available for {{ this.streamName }}</div>\n    </div>\n\n    <div class=\"term-of-services\">\n      <div class=\"version-text\">© {{ year }} m-View Live Video Pty Ltd</div>\n    </div>\n  </div>\n</div>\n", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WebrtcFeedsComponent } from './webrtc-feeds.component';\n\nconst routes: Routes = [{ path: '', component: WebrtcFeedsComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class WebrtcFeedsRoutingModule {}\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WebrtcFeedsComponent } from './webrtc-feeds.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { WebrtcFeedsRoutingModule } from './webrtc-feeds-routing.module';\n\n@NgModule({\n  declarations: [WebrtcFeedsComponent],\n  imports: [CommonModule, SharedModule.forRoot(), WebrtcFeedsRoutingModule]\n})\nexport class WebrtcFeedsModule {}\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "ctx_r0", "LocalExpiryDate", "year", "streamName", "WebrtcFeedsComponent", "currentScreen", "player", "version", "applicationName", "wssUrl", "TokenExpiryTime", "Date", "wsConnection", "videoElement", "peerConnection", "repeaterRetryCount", "constructor", "app", "getFullYear", "getAttribute", "window", "console", "log", "wsConnect", "streamInfo", "userData", "iceServers", "RTCPeerConnection", "WebSocket", "e", "binaryType", "onopen", "onicecandidate", "gotIceCandidate", "ontrack", "event", "track", "kind", "streams", "srcObject", "error", "sendPlayGetOffer", "onmessage", "evt", "data", "handleWsMessage", "onclose", "onerror", "JSON", "stringify", "send", "direction", "command", "candidate", "ice", "msgJSON", "parse", "msgStatus", "Number", "status", "msgCommand", "setTimeout", "stop", "statusDescription", "handleSdpAndIce", "close", "sessionId", "sdpData", "sdp", "mungeSDP", "setRemoteDescription", "RTCSessionDescription", "then", "createAnswer", "description", "setLocalDescription", "catch", "err", "iceCandidates", "addIceCandidate", "RTCIceCandidate", "sdpStr", "sdpLines", "split", "sdpStrRet", "sdpLine", "length", "includes", "profileLevelIdIndex", "indexOf", "profileLevelId", "substring", "profile", "parseInt", "constraint", "level", "newProfileLevelId", "toString", "slice", "toLowerCase", "replace", "ngAfterViewInit", "alert", "document", "getElementById", "ngOnInit", "ngOnDestroy", "\u0275\u0275directiveInject", "AppComponent", "selectors", "standalone", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "WebrtcFeedsComponent_div_0_Template", "WebrtcFeedsComponent_div_1_Template", "WebrtcFeedsComponent_div_2_Template", "\u0275\u0275property", "routes", "path", "component", "WebrtcFeedsComponent", "WebrtcFeedsRoutingModule", "RouterModule", "forChild", "WebrtcFeedsModule", "CommonModule", "SharedModule", "forRoot", "WebrtcFeedsRoutingModule"]
}
