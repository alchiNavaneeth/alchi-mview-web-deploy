{
  "version": 3,
  "sources": ["src/environments/environment.production.ts", "src/app/app.component.ts", "src/app/app.component.html"],
  "sourcesContent": ["export const environment = {\n  production: true,\n};\n", "import { Component, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { environment } from 'src/environments/environment';\nimport { TokenApiService } from './api';\n\nimport { AuthService } from './core/auth/auth.service';\nimport { UserSessionService } from './core/session/user-session.service';\nimport { SharedService } from './modules/shared/services/shared.service';\n\n@Component({\n  standalone: false,\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  isProduction: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private router: Router,\n    private sharedService: SharedService,\n    private tokenApiService: TokenApiService,\n    private authService: AuthService,\n    private userSessionService: UserSessionService\n  ) {\n    this.isProduction = environment.production;\n    this.initializeRouting();\n  }\n\n  private navigateToRoute(route: string, queryParams: any) {\n    if (Object.keys(queryParams).length > 0) {\n      this.router.navigate([route], {\n        queryParams,\n        queryParamsHandling: 'merge'\n      });\n    } else {\n      this.router.navigate([route]);\n    }\n  }\n\n  private async initializeRouting() {\n    const route = this.getAttribute('route');\n    const queryParamsJson = this.getAttribute('queryParams');\n\n    let token = this.getAttribute('token');\n    let loggedInUser = this.getAttribute('loggedInUser');\n    // this.authService.removeToken();\n\n    // Adding token from dev-api for dev\n    if (!token) {\n      const access_token = this.authService.token;\n\n      if (access_token && access_token !== 'null') {\n        const isValid = this.authService.checkTokenExpiration();\n\n        if (!isValid) await this.tokenApiService.fetchToken();\n        token = access_token;\n      } else {\n        await this.tokenApiService.fetchToken();\n        token = access_token;\n      }\n    }\n\n    // Adding logged-in user id\n    let loggedInUserId: number = this.getAttribute('loggedInUserId') ?? 0;\n\n    this.userSessionService.userId = loggedInUserId;\n    this.authService.token = token;\n\n    if (route) {\n      const queryParams = queryParamsJson ? JSON.parse(queryParamsJson) : {};\n      this.navigateToRoute(route, queryParams);\n    }\n  }\n\n  getAttribute(attrName: string) {\n    return this.elementRef.nativeElement.getAttribute(attrName);\n  }\n\n  ngOnInit() {\n    const screen = this.getAttribute('Screen');\n    this.sharedService.changeScreen(screen);\n  }\n}\n", "<topbar-old *ngIf=\"!isProduction\" />\n<router-outlet />\n"],
  "mappings": "uTAAO,IAAMA,EAAc,CACzBC,WAAY,yBEDdC,EAAA,EAAA,YAAA,EDgBA,IAAaC,GAAY,IAAA,CAAnB,MAAOA,CAAY,CAIbC,WACAC,OACAC,cACAC,gBACAC,YACAC,mBARVC,aAEAC,YACUP,EACAC,EACAC,EACAC,EACAC,EACAC,EAAsC,CALtC,KAAAL,WAAAA,EACA,KAAAC,OAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,mBAAAA,EAER,KAAKC,aAAeE,EAAYC,WAChC,KAAKC,kBAAiB,CACxB,CAEQC,gBAAgBC,EAAeC,EAAgB,CACjDC,OAAOC,KAAKF,CAAW,EAAEG,OAAS,EACpC,KAAKf,OAAOgB,SAAS,CAACL,CAAK,EAAG,CAC5BC,YAAAA,EACAK,oBAAqB,QACtB,EAED,KAAKjB,OAAOgB,SAAS,CAACL,CAAK,CAAC,CAEhC,CAEcF,mBAAiB,QAAAS,EAAA,sBAC7B,IAAMP,EAAQ,KAAKQ,aAAa,OAAO,EACjCC,EAAkB,KAAKD,aAAa,aAAa,EAEnDE,EAAQ,KAAKF,aAAa,OAAO,EACjCG,EAAe,KAAKH,aAAa,cAAc,EAInD,GAAI,CAACE,EAAO,CACV,IAAME,EAAe,KAAKpB,YAAYkB,MAElCE,GAAgBA,IAAiB,QACnB,KAAKpB,YAAYqB,qBAAoB,IAEvC,MAAM,KAAKtB,gBAAgBuB,WAAU,GACnDJ,EAAQE,IAER,MAAM,KAAKrB,gBAAgBuB,WAAU,EACrCJ,EAAQE,EAEZ,CAGA,IAAIG,EAAyB,KAAKP,aAAa,gBAAgB,GAAK,EAKpE,GAHA,KAAKf,mBAAmBuB,OAASD,EACjC,KAAKvB,YAAYkB,MAAQA,EAErBV,EAAO,CACT,IAAMC,EAAcQ,EAAkBQ,KAAKC,MAAMT,CAAe,EAAI,CAAA,EACpE,KAAKV,gBAAgBC,EAAOC,CAAW,CACzC,CACF,GAEAO,aAAaW,EAAgB,CAC3B,OAAO,KAAK/B,WAAWgC,cAAcZ,aAAaW,CAAQ,CAC5D,CAEAE,UAAQ,CACN,IAAMC,EAAS,KAAKd,aAAa,QAAQ,EACzC,KAAKlB,cAAciC,aAAaD,CAAM,CACxC,4CApEWnC,GAAYqC,EAAAC,CAAA,EAAAD,EAAAE,CAAA,EAAAF,EAAAG,CAAA,EAAAH,EAAAI,CAAA,EAAAJ,EAAAK,CAAA,EAAAL,EAAAM,CAAA,CAAA,CAAA,2BAAZ3C,EAAY4C,UAAA,CAAA,CAAA,UAAA,CAAA,EAAAC,WAAA,GAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IChBzBE,EAAA,EAAAC,EAAA,EAAA,EAAA,aAAA,CAAA,EACAtD,EAAA,EAAA,eAAA,QADauD,EAAA,OAAA,CAAAH,EAAA5C,YAAA,4GDgBAP,CAAY,GAAA",
  "names": ["environment", "production", "\u0275\u0275element", "AppComponent", "elementRef", "router", "sharedService", "tokenApiService", "authService", "userSessionService", "isProduction", "constructor", "environment", "production", "initializeRouting", "navigateToRoute", "route", "queryParams", "Object", "keys", "length", "navigate", "queryParamsHandling", "__async", "getAttribute", "queryParamsJson", "token", "loggedInUser", "access_token", "checkTokenExpiration", "fetchToken", "loggedInUserId", "userId", "JSON", "parse", "attrName", "nativeElement", "ngOnInit", "screen", "changeScreen", "\u0275\u0275directiveInject", "ElementRef", "Router", "SharedService", "TokenApiService", "AuthService", "UserSessionService", "selectors", "standalone", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "AppComponent_topbar_old_0_Template", "\u0275\u0275property"]
}
